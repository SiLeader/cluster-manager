// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc/leader.proto

#include "rpc/leader.pb.h"

#include <algorithm>

#include <google/protobuf/descriptor.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_rpc_2fleader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_ClusterId_rpc_2fleader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2fleader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_Term_rpc_2fleader_2eproto;
namespace cluster {
    namespace rpc {
        class TermDefaultTypeInternal {
        public:
            ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Term> _instance;
        } _Term_default_instance_;
        class ClusterIdDefaultTypeInternal {
        public:
            ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClusterId> _instance;
        } _ClusterId_default_instance_;
        class RequestDefaultTypeInternal {
        public:
            ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request> _instance;
        } _Request_default_instance_;
        class ResponseDefaultTypeInternal {
        public:
            ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Response> _instance;
        } _Response_default_instance_;
        class HeartbeatDefaultTypeInternal {
        public:
            ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Heartbeat> _instance;
        } _Heartbeat_default_instance_;
        class NetworkStateRequestDefaultTypeInternal {
        public:
            ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkStateRequest> _instance;
        } _NetworkStateRequest_default_instance_;
        class NetworkStateResponseDefaultTypeInternal {
        public:
            ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkStateResponse>
                _instance;
        } _NetworkStateResponse_default_instance_;
    } // namespace rpc
} // namespace cluster
static void InitDefaultsscc_info_ClusterId_rpc_2fleader_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::cluster::rpc::_ClusterId_default_instance_;
        new (ptr)::cluster::rpc::ClusterId();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::cluster::rpc::ClusterId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClusterId_rpc_2fleader_2eproto = {
    {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0,
     InitDefaultsscc_info_ClusterId_rpc_2fleader_2eproto},
    {}};

static void InitDefaultsscc_info_Heartbeat_rpc_2fleader_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::cluster::rpc::_Heartbeat_default_instance_;
        new (ptr)::cluster::rpc::Heartbeat();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::cluster::rpc::Heartbeat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Heartbeat_rpc_2fleader_2eproto = {
    {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2,
     InitDefaultsscc_info_Heartbeat_rpc_2fleader_2eproto},
    {
        &scc_info_Term_rpc_2fleader_2eproto.base,
        &scc_info_ClusterId_rpc_2fleader_2eproto.base,
    }};

static void InitDefaultsscc_info_NetworkStateRequest_rpc_2fleader_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::cluster::rpc::_NetworkStateRequest_default_instance_;
        new (ptr)::cluster::rpc::NetworkStateRequest();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::cluster::rpc::NetworkStateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NetworkStateRequest_rpc_2fleader_2eproto = {
    {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1,
     InitDefaultsscc_info_NetworkStateRequest_rpc_2fleader_2eproto},
    {
        &scc_info_ClusterId_rpc_2fleader_2eproto.base,
    }};

static void InitDefaultsscc_info_NetworkStateResponse_rpc_2fleader_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::cluster::rpc::_NetworkStateResponse_default_instance_;
        new (ptr)::cluster::rpc::NetworkStateResponse();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::cluster::rpc::NetworkStateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NetworkStateResponse_rpc_2fleader_2eproto = {
    {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2,
     InitDefaultsscc_info_NetworkStateResponse_rpc_2fleader_2eproto},
    {
        &scc_info_Term_rpc_2fleader_2eproto.base,
        &scc_info_ClusterId_rpc_2fleader_2eproto.base,
    }};

static void InitDefaultsscc_info_Request_rpc_2fleader_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::cluster::rpc::_Request_default_instance_;
        new (ptr)::cluster::rpc::Request();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::cluster::rpc::Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Request_rpc_2fleader_2eproto = {
    {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2,
     InitDefaultsscc_info_Request_rpc_2fleader_2eproto},
    {
        &scc_info_Term_rpc_2fleader_2eproto.base,
        &scc_info_ClusterId_rpc_2fleader_2eproto.base,
    }};

static void InitDefaultsscc_info_Response_rpc_2fleader_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::cluster::rpc::_Response_default_instance_;
        new (ptr)::cluster::rpc::Response();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::cluster::rpc::Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Response_rpc_2fleader_2eproto = {
    {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2,
     InitDefaultsscc_info_Response_rpc_2fleader_2eproto},
    {
        &scc_info_Term_rpc_2fleader_2eproto.base,
        &scc_info_ClusterId_rpc_2fleader_2eproto.base,
    }};

static void InitDefaultsscc_info_Term_rpc_2fleader_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::cluster::rpc::_Term_default_instance_;
        new (ptr)::cluster::rpc::Term();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::cluster::rpc::Term::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Term_rpc_2fleader_2eproto = {
    {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0,
     InitDefaultsscc_info_Term_rpc_2fleader_2eproto},
    {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rpc_2fleader_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const *
    *file_level_enum_descriptors_rpc_2fleader_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const *
    *file_level_service_descriptors_rpc_2fleader_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32
    TableStruct_rpc_2fleader_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        ~0u, // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cluster::rpc::Term, _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::cluster::rpc::Term, counter_),
        ~0u, // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cluster::rpc::ClusterId, _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::cluster::rpc::ClusterId, host_),
        PROTOBUF_FIELD_OFFSET(::cluster::rpc::ClusterId, port_),
        ~0u, // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cluster::rpc::Request, _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::cluster::rpc::Request, term_),
        PROTOBUF_FIELD_OFFSET(::cluster::rpc::Request, from_),
        ~0u, // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cluster::rpc::Response, _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::cluster::rpc::Response, term_),
        PROTOBUF_FIELD_OFFSET(::cluster::rpc::Response, from_),
        ~0u, // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cluster::rpc::Heartbeat, _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::cluster::rpc::Heartbeat, term_),
        PROTOBUF_FIELD_OFFSET(::cluster::rpc::Heartbeat, from_),
        ~0u, // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cluster::rpc::NetworkStateRequest, _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::cluster::rpc::NetworkStateRequest, from_),
        ~0u, // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cluster::rpc::NetworkStateResponse, _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::cluster::rpc::NetworkStateResponse, term_),
        PROTOBUF_FIELD_OFFSET(::cluster::rpc::NetworkStateResponse, from_),
        PROTOBUF_FIELD_OFFSET(::cluster::rpc::NetworkStateResponse, clusters_),
        PROTOBUF_FIELD_OFFSET(::cluster::rpc::NetworkStateResponse, leader_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, sizeof(::cluster::rpc::Term)},
        {6, -1, sizeof(::cluster::rpc::ClusterId)},
        {13, -1, sizeof(::cluster::rpc::Request)},
        {20, -1, sizeof(::cluster::rpc::Response)},
        {27, -1, sizeof(::cluster::rpc::Heartbeat)},
        {34, -1, sizeof(::cluster::rpc::NetworkStateRequest)},
        {40, -1, sizeof(::cluster::rpc::NetworkStateResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const *const file_default_instances[] = {
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(
        &::cluster::rpc::_Term_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(
        &::cluster::rpc::_ClusterId_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(
        &::cluster::rpc::_Request_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(
        &::cluster::rpc::_Response_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(
        &::cluster::rpc::_Heartbeat_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(
        &::cluster::rpc::_NetworkStateRequest_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(
        &::cluster::rpc::_NetworkStateResponse_default_instance_),
};

const char descriptor_table_protodef_rpc_2fleader_2eproto[] =
    "\n\020rpc/leader.proto\022\013cluster.rpc\"\027\n\004Term\022"
    "\017\n\007counter\030\001 \003(\004\"\'\n\tClusterId\022\014\n\004host\030\001 "
    "\001(\t\022\014\n\004port\030\002 \001(\007\"P\n\007Request\022\037\n\004term\030\001 \001"
    "(\0132\021.cluster.rpc.Term\022$\n\004from\030\002 \001(\0132\026.cl"
    "uster.rpc.ClusterId\"Q\n\010Response\022\037\n\004term\030"
    "\001 \001(\0132\021.cluster.rpc.Term\022$\n\004from\030\002 \001(\0132\026"
    ".cluster.rpc.ClusterId\"R\n\tHeartbeat\022\037\n\004t"
    "erm\030\001 \001(\0132\021.cluster.rpc.Term\022$\n\004from\030\002 \001"
    "(\0132\026.cluster.rpc.ClusterId\";\n\023NetworkSta"
    "teRequest\022$\n\004from\030\001 \001(\0132\026.cluster.rpc.Cl"
    "usterId\"\257\001\n\024NetworkStateResponse\022\037\n\004term"
    "\030\001 \001(\0132\021.cluster.rpc.Term\022$\n\004from\030\002 \001(\0132"
    "\026.cluster.rpc.ClusterId\022(\n\010clusters\030\003 \003("
    "\0132\026.cluster.rpc.ClusterId\022&\n\006leader\030\004 \001("
    "\0132\026.cluster.rpc.ClusterId2\252\002\n\021Management"
    "Service\022V\n\017GetNetworkState\022 .cluster.rpc"
    ".NetworkStateRequest\032!.cluster.rpc.Netwo"
    "rkStateResponse\022\?\n\020GreetAsCandidate\022\024.cl"
    "uster.rpc.Request\032\025.cluster.rpc.Response"
    "\022<\n\rGreetAsLeader\022\024.cluster.rpc.Request\032"
    "\025.cluster.rpc.Response\022>\n\014PulseMonitor\022\026"
    ".cluster.rpc.Heartbeat\032\026.cluster.rpc.Hea"
    "rtbeatb\006proto3";
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    *const descriptor_table_rpc_2fleader_2eproto_deps[1] = {};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase
    *const descriptor_table_rpc_2fleader_2eproto_sccs[7] = {
        &scc_info_ClusterId_rpc_2fleader_2eproto.base,
        &scc_info_Heartbeat_rpc_2fleader_2eproto.base,
        &scc_info_NetworkStateRequest_rpc_2fleader_2eproto.base,
        &scc_info_NetworkStateResponse_rpc_2fleader_2eproto.base,
        &scc_info_Request_rpc_2fleader_2eproto.base,
        &scc_info_Response_rpc_2fleader_2eproto.base,
        &scc_info_Term_rpc_2fleader_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rpc_2fleader_2eproto_once;
static bool descriptor_table_rpc_2fleader_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_2fleader_2eproto = {
    &descriptor_table_rpc_2fleader_2eproto_initialized,
    descriptor_table_protodef_rpc_2fleader_2eproto,
    "rpc/leader.proto",
    894,
    &descriptor_table_rpc_2fleader_2eproto_once,
    descriptor_table_rpc_2fleader_2eproto_sccs,
    descriptor_table_rpc_2fleader_2eproto_deps,
    7,
    0,
    schemas,
    file_default_instances,
    TableStruct_rpc_2fleader_2eproto::offsets,
    file_level_metadata_rpc_2fleader_2eproto,
    7,
    file_level_enum_descriptors_rpc_2fleader_2eproto,
    file_level_service_descriptors_rpc_2fleader_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_rpc_2fleader_2eproto =
    (::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_rpc_2fleader_2eproto),
     true);
namespace cluster {
    namespace rpc {

        // ===================================================================

        void Term::InitAsDefaultInstance() {}
        class Term::HasBitSetters {
        public:
        };

#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int Term::kCounterFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

        Term::Term()
            : ::PROTOBUF_NAMESPACE_ID::Message()
            , _internal_metadata_(nullptr) {
            SharedCtor();
            // @@protoc_insertion_point(constructor:cluster.rpc.Term)
        }
        Term::Term(const Term &from)
            : ::PROTOBUF_NAMESPACE_ID::Message()
            , _internal_metadata_(nullptr)
            , counter_(from.counter_) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            // @@protoc_insertion_point(copy_constructor:cluster.rpc.Term)
        }

        void Term::SharedCtor() {}

        Term::~Term() {
            // @@protoc_insertion_point(destructor:cluster.rpc.Term)
            SharedDtor();
        }

        void Term::SharedDtor() {}

        void Term::SetCachedSize(int size) const { _cached_size_.Set(size); }
        const Term &Term::default_instance() {
            ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Term_rpc_2fleader_2eproto.base);
            return *internal_default_instance();
        }

        void Term::Clear() {
            // @@protoc_insertion_point(message_clear_start:cluster.rpc.Term)
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void)cached_has_bits;

            counter_.Clear();
            _internal_metadata_.Clear();
        }

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        const char *Term::_InternalParse(const char *ptr,
                                         ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                                                                                    \
    if (PROTOBUF_PREDICT_FALSE(!(x)))                                                              \
    goto failure
            while (!ctx->Done(&ptr)) {
                ::PROTOBUF_NAMESPACE_ID::uint32 tag;
                ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
                CHK_(ptr);
                switch (tag >> 3) {
                // repeated uint64 counter = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) ==
                                              10)) {
                        ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(
                            mutable_counter(), ptr, ctx);
                        CHK_(ptr);
                    } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
                        add_counter(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
                        CHK_(ptr);
                    } else
                        goto handle_unusual;
                    continue;
                default: {
                handle_unusual:
                    if ((tag & 7) == 4 || tag == 0) {
                        ctx->SetLastTag(tag);
                        goto success;
                    }
                    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
                    CHK_(ptr != nullptr);
                    continue;
                }
                } // switch
            }     // while
        success:
            return ptr;
        failure:
            ptr = nullptr;
            goto success;
#undef CHK_
        }
#else // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        bool
        Term::MergePartialFromCodedStream(::PROTOBUF_NAMESPACE_ID::io::CodedInputStream *input) {
#define DO_(EXPRESSION)                                                                            \
    if (!PROTOBUF_PREDICT_TRUE(EXPRESSION))                                                        \
    goto failure
            ::PROTOBUF_NAMESPACE_ID::uint32 tag;
            // @@protoc_insertion_point(parse_start:cluster.rpc.Term)
            for (;;) {
                ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p =
                    input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second)
                    goto handle_unusual;
                switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // repeated uint64 counter = 1;
                case 1: {
                    if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
                        DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                             ::PROTOBUF_NAMESPACE_ID::uint64,
                             ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                            input, this->mutable_counter())));
                    } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
                        DO_((
                            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                                ReadRepeatedPrimitiveNoInline<
                                    ::PROTOBUF_NAMESPACE_ID::uint64,
                                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                                    1, 10u, input, this->mutable_counter())));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                default: {
                handle_unusual:
                    if (tag == 0) {
                        goto success;
                    }
                    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
                        input, tag, _internal_metadata_.mutable_unknown_fields()));
                    break;
                }
                }
            }
        success:
            // @@protoc_insertion_point(parse_success:cluster.rpc.Term)
            return true;
        failure:
            // @@protoc_insertion_point(parse_failure:cluster.rpc.Term)
            return false;
#undef DO_
        }
#endif // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

        void Term::SerializeWithCachedSizes(
            ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream *output) const {
            // @@protoc_insertion_point(serialize_start:cluster.rpc.Term)
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            (void)cached_has_bits;

            // repeated uint64 counter = 1;
            if (this->counter_size() > 0) {
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(
                    1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
                    output);
                output->WriteVarint32(_counter_cached_byte_size_.load(std::memory_order_relaxed));
            }
            for (int i = 0, n = this->counter_size(); i < n; i++) {
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64NoTag(
                    this->counter(i), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:cluster.rpc.Term)
        }

        ::PROTOBUF_NAMESPACE_ID::uint8 *Term::InternalSerializeWithCachedSizesToArray(
            ::PROTOBUF_NAMESPACE_ID::uint8 *target) const {
            // @@protoc_insertion_point(serialize_to_array_start:cluster.rpc.Term)
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            (void)cached_has_bits;

            // repeated uint64 counter = 1;
            if (this->counter_size() > 0) {
                target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
                    1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
                    target);
                target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
                    _counter_cached_byte_size_.load(std::memory_order_relaxed), target);
                target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64NoTagToArray(
                    this->counter_, target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target =
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
                        _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:cluster.rpc.Term)
            return target;
        }

        size_t Term::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:cluster.rpc.Term)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
                        _internal_metadata_.unknown_fields());
            }
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void)cached_has_bits;

            // repeated uint64 counter = 1;
            {
                size_t data_size =
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(this->counter_);
                if (data_size > 0) {
                    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                                          static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
                }
                int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
                _counter_cached_byte_size_.store(cached_size, std::memory_order_relaxed);
                total_size += data_size;
            }

            int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
            SetCachedSize(cached_size);
            return total_size;
        }

        void Term::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
            // @@protoc_insertion_point(generalized_merge_from_start:cluster.rpc.Term)
            GOOGLE_DCHECK_NE(&from, this);
            const Term *source = ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Term>(&from);
            if (source == nullptr) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:cluster.rpc.Term)
                ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:cluster.rpc.Term)
                MergeFrom(*source);
            }
        }

        void Term::MergeFrom(const Term &from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:cluster.rpc.Term)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            (void)cached_has_bits;

            counter_.MergeFrom(from.counter_);
        }

        void Term::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
            // @@protoc_insertion_point(generalized_copy_from_start:cluster.rpc.Term)
            if (&from == this)
                return;
            Clear();
            MergeFrom(from);
        }

        void Term::CopyFrom(const Term &from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:cluster.rpc.Term)
            if (&from == this)
                return;
            Clear();
            MergeFrom(from);
        }

        bool Term::IsInitialized() const { return true; }

        void Term::Swap(Term *other) {
            if (other == this)
                return;
            InternalSwap(other);
        }
        void Term::InternalSwap(Term *other) {
            using std::swap;
            _internal_metadata_.Swap(&other->_internal_metadata_);
            counter_.InternalSwap(&other->counter_);
        }

        ::PROTOBUF_NAMESPACE_ID::Metadata Term::GetMetadata() const { return GetMetadataStatic(); }

        // ===================================================================

        void ClusterId::InitAsDefaultInstance() {}
        class ClusterId::HasBitSetters {
        public:
        };

#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int ClusterId::kHostFieldNumber;
        const int ClusterId::kPortFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

        ClusterId::ClusterId()
            : ::PROTOBUF_NAMESPACE_ID::Message()
            , _internal_metadata_(nullptr) {
            SharedCtor();
            // @@protoc_insertion_point(constructor:cluster.rpc.ClusterId)
        }
        ClusterId::ClusterId(const ClusterId &from)
            : ::PROTOBUF_NAMESPACE_ID::Message()
            , _internal_metadata_(nullptr) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            host_.UnsafeSetDefault(
                &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
            if (from.host().size() > 0) {
                host_.AssignWithDefault(
                    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_);
            }
            port_ = from.port_;
            // @@protoc_insertion_point(copy_constructor:cluster.rpc.ClusterId)
        }

        void ClusterId::SharedCtor() {
            ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
                &scc_info_ClusterId_rpc_2fleader_2eproto.base);
            host_.UnsafeSetDefault(
                &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
            port_ = 0u;
        }

        ClusterId::~ClusterId() {
            // @@protoc_insertion_point(destructor:cluster.rpc.ClusterId)
            SharedDtor();
        }

        void ClusterId::SharedDtor() {
            host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
        }

        void ClusterId::SetCachedSize(int size) const { _cached_size_.Set(size); }
        const ClusterId &ClusterId::default_instance() {
            ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
                &::scc_info_ClusterId_rpc_2fleader_2eproto.base);
            return *internal_default_instance();
        }

        void ClusterId::Clear() {
            // @@protoc_insertion_point(message_clear_start:cluster.rpc.ClusterId)
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void)cached_has_bits;

            host_.ClearToEmptyNoArena(
                &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
            port_ = 0u;
            _internal_metadata_.Clear();
        }

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        const char *
        ClusterId::_InternalParse(const char *ptr,
                                  ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                                                                                    \
    if (PROTOBUF_PREDICT_FALSE(!(x)))                                                              \
    goto failure
            while (!ctx->Done(&ptr)) {
                ::PROTOBUF_NAMESPACE_ID::uint32 tag;
                ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
                CHK_(ptr);
                switch (tag >> 3) {
                // string host = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) ==
                                              10)) {
                        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(
                            mutable_host(), ptr, ctx, "cluster.rpc.ClusterId.host");
                        CHK_(ptr);
                    } else
                        goto handle_unusual;
                    continue;
                // fixed32 port = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) ==
                                              21)) {
                        port_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<
                            ::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
                        ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
                    } else
                        goto handle_unusual;
                    continue;
                default: {
                handle_unusual:
                    if ((tag & 7) == 4 || tag == 0) {
                        ctx->SetLastTag(tag);
                        goto success;
                    }
                    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
                    CHK_(ptr != nullptr);
                    continue;
                }
                } // switch
            }     // while
        success:
            return ptr;
        failure:
            ptr = nullptr;
            goto success;
#undef CHK_
        }
#else // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        bool ClusterId::MergePartialFromCodedStream(
            ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream *input) {
#define DO_(EXPRESSION)                                                                            \
    if (!PROTOBUF_PREDICT_TRUE(EXPRESSION))                                                        \
    goto failure
            ::PROTOBUF_NAMESPACE_ID::uint32 tag;
            // @@protoc_insertion_point(parse_start:cluster.rpc.ClusterId)
            for (;;) {
                ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p =
                    input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second)
                    goto handle_unusual;
                switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // string host = 1;
                case 1: {
                    if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
                        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                            input, this->mutable_host()));
                        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                            this->host().data(), static_cast<int>(this->host().length()),
                            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
                            "cluster.rpc.ClusterId.host"));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                // fixed32 port = 2;
                case 2: {
                    if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

                        DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                             ::PROTOBUF_NAMESPACE_ID::uint32,
                             ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED32>(
                            input, &port_)));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                default: {
                handle_unusual:
                    if (tag == 0) {
                        goto success;
                    }
                    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
                        input, tag, _internal_metadata_.mutable_unknown_fields()));
                    break;
                }
                }
            }
        success:
            // @@protoc_insertion_point(parse_success:cluster.rpc.ClusterId)
            return true;
        failure:
            // @@protoc_insertion_point(parse_failure:cluster.rpc.ClusterId)
            return false;
#undef DO_
        }
#endif // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

        void ClusterId::SerializeWithCachedSizes(
            ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream *output) const {
            // @@protoc_insertion_point(serialize_start:cluster.rpc.ClusterId)
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            (void)cached_has_bits;

            // string host = 1;
            if (this->host().size() > 0) {
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                    this->host().data(), static_cast<int>(this->host().length()),
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                    "cluster.rpc.ClusterId.host");
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
                    1, this->host(), output);
            }

            // fixed32 port = 2;
            if (this->port() != 0) {
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32(2, this->port(),
                                                                                output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:cluster.rpc.ClusterId)
        }

        ::PROTOBUF_NAMESPACE_ID::uint8 *ClusterId::InternalSerializeWithCachedSizesToArray(
            ::PROTOBUF_NAMESPACE_ID::uint8 *target) const {
            // @@protoc_insertion_point(serialize_to_array_start:cluster.rpc.ClusterId)
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            (void)cached_has_bits;

            // string host = 1;
            if (this->host().size() > 0) {
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                    this->host().data(), static_cast<int>(this->host().length()),
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                    "cluster.rpc.ClusterId.host");
                target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
                    1, this->host(), target);
            }

            // fixed32 port = 2;
            if (this->port() != 0) {
                target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(
                    2, this->port(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target =
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
                        _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:cluster.rpc.ClusterId)
            return target;
        }

        size_t ClusterId::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:cluster.rpc.ClusterId)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
                        _internal_metadata_.unknown_fields());
            }
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void)cached_has_bits;

            // string host = 1;
            if (this->host().size() > 0) {
                total_size +=
                    1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(this->host());
            }

            // fixed32 port = 2;
            if (this->port() != 0) {
                total_size += 1 + 4;
            }

            int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
            SetCachedSize(cached_size);
            return total_size;
        }

        void ClusterId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
            // @@protoc_insertion_point(generalized_merge_from_start:cluster.rpc.ClusterId)
            GOOGLE_DCHECK_NE(&from, this);
            const ClusterId *source =
                ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClusterId>(&from);
            if (source == nullptr) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:cluster.rpc.ClusterId)
                ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:cluster.rpc.ClusterId)
                MergeFrom(*source);
            }
        }

        void ClusterId::MergeFrom(const ClusterId &from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:cluster.rpc.ClusterId)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            (void)cached_has_bits;

            if (from.host().size() > 0) {

                host_.AssignWithDefault(
                    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_);
            }
            if (from.port() != 0) {
                set_port(from.port());
            }
        }

        void ClusterId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
            // @@protoc_insertion_point(generalized_copy_from_start:cluster.rpc.ClusterId)
            if (&from == this)
                return;
            Clear();
            MergeFrom(from);
        }

        void ClusterId::CopyFrom(const ClusterId &from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:cluster.rpc.ClusterId)
            if (&from == this)
                return;
            Clear();
            MergeFrom(from);
        }

        bool ClusterId::IsInitialized() const { return true; }

        void ClusterId::Swap(ClusterId *other) {
            if (other == this)
                return;
            InternalSwap(other);
        }
        void ClusterId::InternalSwap(ClusterId *other) {
            using std::swap;
            _internal_metadata_.Swap(&other->_internal_metadata_);
            host_.Swap(&other->host_,
                       &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                       GetArenaNoVirtual());
            swap(port_, other->port_);
        }

        ::PROTOBUF_NAMESPACE_ID::Metadata ClusterId::GetMetadata() const {
            return GetMetadataStatic();
        }

        // ===================================================================

        void Request::InitAsDefaultInstance() {
            ::cluster::rpc::_Request_default_instance_._instance.get_mutable()->term_ =
                const_cast<::cluster::rpc::Term *>(
                    ::cluster::rpc::Term::internal_default_instance());
            ::cluster::rpc::_Request_default_instance_._instance.get_mutable()->from_ =
                const_cast<::cluster::rpc::ClusterId *>(
                    ::cluster::rpc::ClusterId::internal_default_instance());
        }
        class Request::HasBitSetters {
        public:
            static const ::cluster::rpc::Term &term(const Request *msg);
            static const ::cluster::rpc::ClusterId &from(const Request *msg);
        };

        const ::cluster::rpc::Term &Request::HasBitSetters::term(const Request *msg) {
            return *msg->term_;
        }
        const ::cluster::rpc::ClusterId &Request::HasBitSetters::from(const Request *msg) {
            return *msg->from_;
        }
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int Request::kTermFieldNumber;
        const int Request::kFromFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

        Request::Request()
            : ::PROTOBUF_NAMESPACE_ID::Message()
            , _internal_metadata_(nullptr) {
            SharedCtor();
            // @@protoc_insertion_point(constructor:cluster.rpc.Request)
        }
        Request::Request(const Request &from)
            : ::PROTOBUF_NAMESPACE_ID::Message()
            , _internal_metadata_(nullptr) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            if (from.has_term()) {
                term_ = new ::cluster::rpc::Term(*from.term_);
            } else {
                term_ = nullptr;
            }
            if (from.has_from()) {
                from_ = new ::cluster::rpc::ClusterId(*from.from_);
            } else {
                from_ = nullptr;
            }
            // @@protoc_insertion_point(copy_constructor:cluster.rpc.Request)
        }

        void Request::SharedCtor() {
            ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Request_rpc_2fleader_2eproto.base);
            ::memset(&term_, 0,
                     static_cast<size_t>(reinterpret_cast<char *>(&from_) -
                                         reinterpret_cast<char *>(&term_)) +
                         sizeof(from_));
        }

        Request::~Request() {
            // @@protoc_insertion_point(destructor:cluster.rpc.Request)
            SharedDtor();
        }

        void Request::SharedDtor() {
            if (this != internal_default_instance())
                delete term_;
            if (this != internal_default_instance())
                delete from_;
        }

        void Request::SetCachedSize(int size) const { _cached_size_.Set(size); }
        const Request &Request::default_instance() {
            ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
                &::scc_info_Request_rpc_2fleader_2eproto.base);
            return *internal_default_instance();
        }

        void Request::Clear() {
            // @@protoc_insertion_point(message_clear_start:cluster.rpc.Request)
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void)cached_has_bits;

            if (GetArenaNoVirtual() == nullptr && term_ != nullptr) {
                delete term_;
            }
            term_ = nullptr;
            if (GetArenaNoVirtual() == nullptr && from_ != nullptr) {
                delete from_;
            }
            from_ = nullptr;
            _internal_metadata_.Clear();
        }

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        const char *Request::_InternalParse(const char *ptr,
                                            ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                                                                                    \
    if (PROTOBUF_PREDICT_FALSE(!(x)))                                                              \
    goto failure
            while (!ctx->Done(&ptr)) {
                ::PROTOBUF_NAMESPACE_ID::uint32 tag;
                ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
                CHK_(ptr);
                switch (tag >> 3) {
                // .cluster.rpc.Term term = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) ==
                                              10)) {
                        ptr = ctx->ParseMessage(mutable_term(), ptr);
                        CHK_(ptr);
                    } else
                        goto handle_unusual;
                    continue;
                // .cluster.rpc.ClusterId from = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) ==
                                              18)) {
                        ptr = ctx->ParseMessage(mutable_from(), ptr);
                        CHK_(ptr);
                    } else
                        goto handle_unusual;
                    continue;
                default: {
                handle_unusual:
                    if ((tag & 7) == 4 || tag == 0) {
                        ctx->SetLastTag(tag);
                        goto success;
                    }
                    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
                    CHK_(ptr != nullptr);
                    continue;
                }
                } // switch
            }     // while
        success:
            return ptr;
        failure:
            ptr = nullptr;
            goto success;
#undef CHK_
        }
#else // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        bool
        Request::MergePartialFromCodedStream(::PROTOBUF_NAMESPACE_ID::io::CodedInputStream *input) {
#define DO_(EXPRESSION)                                                                            \
    if (!PROTOBUF_PREDICT_TRUE(EXPRESSION))                                                        \
    goto failure
            ::PROTOBUF_NAMESPACE_ID::uint32 tag;
            // @@protoc_insertion_point(parse_start:cluster.rpc.Request)
            for (;;) {
                ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p =
                    input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second)
                    goto handle_unusual;
                switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // .cluster.rpc.Term term = 1;
                case 1: {
                    if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
                        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                            input, mutable_term()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                // .cluster.rpc.ClusterId from = 2;
                case 2: {
                    if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
                        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                            input, mutable_from()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                default: {
                handle_unusual:
                    if (tag == 0) {
                        goto success;
                    }
                    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
                        input, tag, _internal_metadata_.mutable_unknown_fields()));
                    break;
                }
                }
            }
        success:
            // @@protoc_insertion_point(parse_success:cluster.rpc.Request)
            return true;
        failure:
            // @@protoc_insertion_point(parse_failure:cluster.rpc.Request)
            return false;
#undef DO_
        }
#endif // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

        void Request::SerializeWithCachedSizes(
            ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream *output) const {
            // @@protoc_insertion_point(serialize_start:cluster.rpc.Request)
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            (void)cached_has_bits;

            // .cluster.rpc.Term term = 1;
            if (this->has_term()) {
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
                    1, HasBitSetters::term(this), output);
            }

            // .cluster.rpc.ClusterId from = 2;
            if (this->has_from()) {
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
                    2, HasBitSetters::from(this), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:cluster.rpc.Request)
        }

        ::PROTOBUF_NAMESPACE_ID::uint8 *Request::InternalSerializeWithCachedSizesToArray(
            ::PROTOBUF_NAMESPACE_ID::uint8 *target) const {
            // @@protoc_insertion_point(serialize_to_array_start:cluster.rpc.Request)
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            (void)cached_has_bits;

            // .cluster.rpc.Term term = 1;
            if (this->has_term()) {
                target =
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageToArray(
                        1, HasBitSetters::term(this), target);
            }

            // .cluster.rpc.ClusterId from = 2;
            if (this->has_from()) {
                target =
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageToArray(
                        2, HasBitSetters::from(this), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target =
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
                        _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:cluster.rpc.Request)
            return target;
        }

        size_t Request::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:cluster.rpc.Request)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
                        _internal_metadata_.unknown_fields());
            }
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void)cached_has_bits;

            // .cluster.rpc.Term term = 1;
            if (this->has_term()) {
                total_size +=
                    1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*term_);
            }

            // .cluster.rpc.ClusterId from = 2;
            if (this->has_from()) {
                total_size +=
                    1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*from_);
            }

            int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
            SetCachedSize(cached_size);
            return total_size;
        }

        void Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
            // @@protoc_insertion_point(generalized_merge_from_start:cluster.rpc.Request)
            GOOGLE_DCHECK_NE(&from, this);
            const Request *source = ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Request>(&from);
            if (source == nullptr) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:cluster.rpc.Request)
                ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:cluster.rpc.Request)
                MergeFrom(*source);
            }
        }

        void Request::MergeFrom(const Request &from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:cluster.rpc.Request)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            (void)cached_has_bits;

            if (from.has_term()) {
                mutable_term()->::cluster::rpc::Term::MergeFrom(from.term());
            }
            if (from.has_from()) {
                mutable_from()->::cluster::rpc::ClusterId::MergeFrom(from.from());
            }
        }

        void Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
            // @@protoc_insertion_point(generalized_copy_from_start:cluster.rpc.Request)
            if (&from == this)
                return;
            Clear();
            MergeFrom(from);
        }

        void Request::CopyFrom(const Request &from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:cluster.rpc.Request)
            if (&from == this)
                return;
            Clear();
            MergeFrom(from);
        }

        bool Request::IsInitialized() const { return true; }

        void Request::Swap(Request *other) {
            if (other == this)
                return;
            InternalSwap(other);
        }
        void Request::InternalSwap(Request *other) {
            using std::swap;
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(term_, other->term_);
            swap(from_, other->from_);
        }

        ::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
            return GetMetadataStatic();
        }

        // ===================================================================

        void Response::InitAsDefaultInstance() {
            ::cluster::rpc::_Response_default_instance_._instance.get_mutable()->term_ =
                const_cast<::cluster::rpc::Term *>(
                    ::cluster::rpc::Term::internal_default_instance());
            ::cluster::rpc::_Response_default_instance_._instance.get_mutable()->from_ =
                const_cast<::cluster::rpc::ClusterId *>(
                    ::cluster::rpc::ClusterId::internal_default_instance());
        }
        class Response::HasBitSetters {
        public:
            static const ::cluster::rpc::Term &term(const Response *msg);
            static const ::cluster::rpc::ClusterId &from(const Response *msg);
        };

        const ::cluster::rpc::Term &Response::HasBitSetters::term(const Response *msg) {
            return *msg->term_;
        }
        const ::cluster::rpc::ClusterId &Response::HasBitSetters::from(const Response *msg) {
            return *msg->from_;
        }
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int Response::kTermFieldNumber;
        const int Response::kFromFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

        Response::Response()
            : ::PROTOBUF_NAMESPACE_ID::Message()
            , _internal_metadata_(nullptr) {
            SharedCtor();
            // @@protoc_insertion_point(constructor:cluster.rpc.Response)
        }
        Response::Response(const Response &from)
            : ::PROTOBUF_NAMESPACE_ID::Message()
            , _internal_metadata_(nullptr) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            if (from.has_term()) {
                term_ = new ::cluster::rpc::Term(*from.term_);
            } else {
                term_ = nullptr;
            }
            if (from.has_from()) {
                from_ = new ::cluster::rpc::ClusterId(*from.from_);
            } else {
                from_ = nullptr;
            }
            // @@protoc_insertion_point(copy_constructor:cluster.rpc.Response)
        }

        void Response::SharedCtor() {
            ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
                &scc_info_Response_rpc_2fleader_2eproto.base);
            ::memset(&term_, 0,
                     static_cast<size_t>(reinterpret_cast<char *>(&from_) -
                                         reinterpret_cast<char *>(&term_)) +
                         sizeof(from_));
        }

        Response::~Response() {
            // @@protoc_insertion_point(destructor:cluster.rpc.Response)
            SharedDtor();
        }

        void Response::SharedDtor() {
            if (this != internal_default_instance())
                delete term_;
            if (this != internal_default_instance())
                delete from_;
        }

        void Response::SetCachedSize(int size) const { _cached_size_.Set(size); }
        const Response &Response::default_instance() {
            ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
                &::scc_info_Response_rpc_2fleader_2eproto.base);
            return *internal_default_instance();
        }

        void Response::Clear() {
            // @@protoc_insertion_point(message_clear_start:cluster.rpc.Response)
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void)cached_has_bits;

            if (GetArenaNoVirtual() == nullptr && term_ != nullptr) {
                delete term_;
            }
            term_ = nullptr;
            if (GetArenaNoVirtual() == nullptr && from_ != nullptr) {
                delete from_;
            }
            from_ = nullptr;
            _internal_metadata_.Clear();
        }

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        const char *Response::_InternalParse(const char *ptr,
                                             ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                                                                                    \
    if (PROTOBUF_PREDICT_FALSE(!(x)))                                                              \
    goto failure
            while (!ctx->Done(&ptr)) {
                ::PROTOBUF_NAMESPACE_ID::uint32 tag;
                ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
                CHK_(ptr);
                switch (tag >> 3) {
                // .cluster.rpc.Term term = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) ==
                                              10)) {
                        ptr = ctx->ParseMessage(mutable_term(), ptr);
                        CHK_(ptr);
                    } else
                        goto handle_unusual;
                    continue;
                // .cluster.rpc.ClusterId from = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) ==
                                              18)) {
                        ptr = ctx->ParseMessage(mutable_from(), ptr);
                        CHK_(ptr);
                    } else
                        goto handle_unusual;
                    continue;
                default: {
                handle_unusual:
                    if ((tag & 7) == 4 || tag == 0) {
                        ctx->SetLastTag(tag);
                        goto success;
                    }
                    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
                    CHK_(ptr != nullptr);
                    continue;
                }
                } // switch
            }     // while
        success:
            return ptr;
        failure:
            ptr = nullptr;
            goto success;
#undef CHK_
        }
#else // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        bool Response::MergePartialFromCodedStream(
            ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream *input) {
#define DO_(EXPRESSION)                                                                            \
    if (!PROTOBUF_PREDICT_TRUE(EXPRESSION))                                                        \
    goto failure
            ::PROTOBUF_NAMESPACE_ID::uint32 tag;
            // @@protoc_insertion_point(parse_start:cluster.rpc.Response)
            for (;;) {
                ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p =
                    input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second)
                    goto handle_unusual;
                switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // .cluster.rpc.Term term = 1;
                case 1: {
                    if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
                        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                            input, mutable_term()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                // .cluster.rpc.ClusterId from = 2;
                case 2: {
                    if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
                        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                            input, mutable_from()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                default: {
                handle_unusual:
                    if (tag == 0) {
                        goto success;
                    }
                    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
                        input, tag, _internal_metadata_.mutable_unknown_fields()));
                    break;
                }
                }
            }
        success:
            // @@protoc_insertion_point(parse_success:cluster.rpc.Response)
            return true;
        failure:
            // @@protoc_insertion_point(parse_failure:cluster.rpc.Response)
            return false;
#undef DO_
        }
#endif // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

        void Response::SerializeWithCachedSizes(
            ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream *output) const {
            // @@protoc_insertion_point(serialize_start:cluster.rpc.Response)
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            (void)cached_has_bits;

            // .cluster.rpc.Term term = 1;
            if (this->has_term()) {
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
                    1, HasBitSetters::term(this), output);
            }

            // .cluster.rpc.ClusterId from = 2;
            if (this->has_from()) {
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
                    2, HasBitSetters::from(this), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:cluster.rpc.Response)
        }

        ::PROTOBUF_NAMESPACE_ID::uint8 *Response::InternalSerializeWithCachedSizesToArray(
            ::PROTOBUF_NAMESPACE_ID::uint8 *target) const {
            // @@protoc_insertion_point(serialize_to_array_start:cluster.rpc.Response)
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            (void)cached_has_bits;

            // .cluster.rpc.Term term = 1;
            if (this->has_term()) {
                target =
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageToArray(
                        1, HasBitSetters::term(this), target);
            }

            // .cluster.rpc.ClusterId from = 2;
            if (this->has_from()) {
                target =
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageToArray(
                        2, HasBitSetters::from(this), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target =
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
                        _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:cluster.rpc.Response)
            return target;
        }

        size_t Response::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:cluster.rpc.Response)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
                        _internal_metadata_.unknown_fields());
            }
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void)cached_has_bits;

            // .cluster.rpc.Term term = 1;
            if (this->has_term()) {
                total_size +=
                    1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*term_);
            }

            // .cluster.rpc.ClusterId from = 2;
            if (this->has_from()) {
                total_size +=
                    1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*from_);
            }

            int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
            SetCachedSize(cached_size);
            return total_size;
        }

        void Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
            // @@protoc_insertion_point(generalized_merge_from_start:cluster.rpc.Response)
            GOOGLE_DCHECK_NE(&from, this);
            const Response *source =
                ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Response>(&from);
            if (source == nullptr) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:cluster.rpc.Response)
                ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:cluster.rpc.Response)
                MergeFrom(*source);
            }
        }

        void Response::MergeFrom(const Response &from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:cluster.rpc.Response)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            (void)cached_has_bits;

            if (from.has_term()) {
                mutable_term()->::cluster::rpc::Term::MergeFrom(from.term());
            }
            if (from.has_from()) {
                mutable_from()->::cluster::rpc::ClusterId::MergeFrom(from.from());
            }
        }

        void Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
            // @@protoc_insertion_point(generalized_copy_from_start:cluster.rpc.Response)
            if (&from == this)
                return;
            Clear();
            MergeFrom(from);
        }

        void Response::CopyFrom(const Response &from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:cluster.rpc.Response)
            if (&from == this)
                return;
            Clear();
            MergeFrom(from);
        }

        bool Response::IsInitialized() const { return true; }

        void Response::Swap(Response *other) {
            if (other == this)
                return;
            InternalSwap(other);
        }
        void Response::InternalSwap(Response *other) {
            using std::swap;
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(term_, other->term_);
            swap(from_, other->from_);
        }

        ::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
            return GetMetadataStatic();
        }

        // ===================================================================

        void Heartbeat::InitAsDefaultInstance() {
            ::cluster::rpc::_Heartbeat_default_instance_._instance.get_mutable()->term_ =
                const_cast<::cluster::rpc::Term *>(
                    ::cluster::rpc::Term::internal_default_instance());
            ::cluster::rpc::_Heartbeat_default_instance_._instance.get_mutable()->from_ =
                const_cast<::cluster::rpc::ClusterId *>(
                    ::cluster::rpc::ClusterId::internal_default_instance());
        }
        class Heartbeat::HasBitSetters {
        public:
            static const ::cluster::rpc::Term &term(const Heartbeat *msg);
            static const ::cluster::rpc::ClusterId &from(const Heartbeat *msg);
        };

        const ::cluster::rpc::Term &Heartbeat::HasBitSetters::term(const Heartbeat *msg) {
            return *msg->term_;
        }
        const ::cluster::rpc::ClusterId &Heartbeat::HasBitSetters::from(const Heartbeat *msg) {
            return *msg->from_;
        }
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int Heartbeat::kTermFieldNumber;
        const int Heartbeat::kFromFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

        Heartbeat::Heartbeat()
            : ::PROTOBUF_NAMESPACE_ID::Message()
            , _internal_metadata_(nullptr) {
            SharedCtor();
            // @@protoc_insertion_point(constructor:cluster.rpc.Heartbeat)
        }
        Heartbeat::Heartbeat(const Heartbeat &from)
            : ::PROTOBUF_NAMESPACE_ID::Message()
            , _internal_metadata_(nullptr) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            if (from.has_term()) {
                term_ = new ::cluster::rpc::Term(*from.term_);
            } else {
                term_ = nullptr;
            }
            if (from.has_from()) {
                from_ = new ::cluster::rpc::ClusterId(*from.from_);
            } else {
                from_ = nullptr;
            }
            // @@protoc_insertion_point(copy_constructor:cluster.rpc.Heartbeat)
        }

        void Heartbeat::SharedCtor() {
            ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
                &scc_info_Heartbeat_rpc_2fleader_2eproto.base);
            ::memset(&term_, 0,
                     static_cast<size_t>(reinterpret_cast<char *>(&from_) -
                                         reinterpret_cast<char *>(&term_)) +
                         sizeof(from_));
        }

        Heartbeat::~Heartbeat() {
            // @@protoc_insertion_point(destructor:cluster.rpc.Heartbeat)
            SharedDtor();
        }

        void Heartbeat::SharedDtor() {
            if (this != internal_default_instance())
                delete term_;
            if (this != internal_default_instance())
                delete from_;
        }

        void Heartbeat::SetCachedSize(int size) const { _cached_size_.Set(size); }
        const Heartbeat &Heartbeat::default_instance() {
            ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
                &::scc_info_Heartbeat_rpc_2fleader_2eproto.base);
            return *internal_default_instance();
        }

        void Heartbeat::Clear() {
            // @@protoc_insertion_point(message_clear_start:cluster.rpc.Heartbeat)
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void)cached_has_bits;

            if (GetArenaNoVirtual() == nullptr && term_ != nullptr) {
                delete term_;
            }
            term_ = nullptr;
            if (GetArenaNoVirtual() == nullptr && from_ != nullptr) {
                delete from_;
            }
            from_ = nullptr;
            _internal_metadata_.Clear();
        }

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        const char *
        Heartbeat::_InternalParse(const char *ptr,
                                  ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                                                                                    \
    if (PROTOBUF_PREDICT_FALSE(!(x)))                                                              \
    goto failure
            while (!ctx->Done(&ptr)) {
                ::PROTOBUF_NAMESPACE_ID::uint32 tag;
                ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
                CHK_(ptr);
                switch (tag >> 3) {
                // .cluster.rpc.Term term = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) ==
                                              10)) {
                        ptr = ctx->ParseMessage(mutable_term(), ptr);
                        CHK_(ptr);
                    } else
                        goto handle_unusual;
                    continue;
                // .cluster.rpc.ClusterId from = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) ==
                                              18)) {
                        ptr = ctx->ParseMessage(mutable_from(), ptr);
                        CHK_(ptr);
                    } else
                        goto handle_unusual;
                    continue;
                default: {
                handle_unusual:
                    if ((tag & 7) == 4 || tag == 0) {
                        ctx->SetLastTag(tag);
                        goto success;
                    }
                    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
                    CHK_(ptr != nullptr);
                    continue;
                }
                } // switch
            }     // while
        success:
            return ptr;
        failure:
            ptr = nullptr;
            goto success;
#undef CHK_
        }
#else // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        bool Heartbeat::MergePartialFromCodedStream(
            ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream *input) {
#define DO_(EXPRESSION)                                                                            \
    if (!PROTOBUF_PREDICT_TRUE(EXPRESSION))                                                        \
    goto failure
            ::PROTOBUF_NAMESPACE_ID::uint32 tag;
            // @@protoc_insertion_point(parse_start:cluster.rpc.Heartbeat)
            for (;;) {
                ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p =
                    input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second)
                    goto handle_unusual;
                switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // .cluster.rpc.Term term = 1;
                case 1: {
                    if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
                        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                            input, mutable_term()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                // .cluster.rpc.ClusterId from = 2;
                case 2: {
                    if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
                        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                            input, mutable_from()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                default: {
                handle_unusual:
                    if (tag == 0) {
                        goto success;
                    }
                    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
                        input, tag, _internal_metadata_.mutable_unknown_fields()));
                    break;
                }
                }
            }
        success:
            // @@protoc_insertion_point(parse_success:cluster.rpc.Heartbeat)
            return true;
        failure:
            // @@protoc_insertion_point(parse_failure:cluster.rpc.Heartbeat)
            return false;
#undef DO_
        }
#endif // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

        void Heartbeat::SerializeWithCachedSizes(
            ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream *output) const {
            // @@protoc_insertion_point(serialize_start:cluster.rpc.Heartbeat)
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            (void)cached_has_bits;

            // .cluster.rpc.Term term = 1;
            if (this->has_term()) {
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
                    1, HasBitSetters::term(this), output);
            }

            // .cluster.rpc.ClusterId from = 2;
            if (this->has_from()) {
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
                    2, HasBitSetters::from(this), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:cluster.rpc.Heartbeat)
        }

        ::PROTOBUF_NAMESPACE_ID::uint8 *Heartbeat::InternalSerializeWithCachedSizesToArray(
            ::PROTOBUF_NAMESPACE_ID::uint8 *target) const {
            // @@protoc_insertion_point(serialize_to_array_start:cluster.rpc.Heartbeat)
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            (void)cached_has_bits;

            // .cluster.rpc.Term term = 1;
            if (this->has_term()) {
                target =
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageToArray(
                        1, HasBitSetters::term(this), target);
            }

            // .cluster.rpc.ClusterId from = 2;
            if (this->has_from()) {
                target =
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageToArray(
                        2, HasBitSetters::from(this), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target =
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
                        _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:cluster.rpc.Heartbeat)
            return target;
        }

        size_t Heartbeat::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:cluster.rpc.Heartbeat)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
                        _internal_metadata_.unknown_fields());
            }
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void)cached_has_bits;

            // .cluster.rpc.Term term = 1;
            if (this->has_term()) {
                total_size +=
                    1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*term_);
            }

            // .cluster.rpc.ClusterId from = 2;
            if (this->has_from()) {
                total_size +=
                    1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*from_);
            }

            int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
            SetCachedSize(cached_size);
            return total_size;
        }

        void Heartbeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
            // @@protoc_insertion_point(generalized_merge_from_start:cluster.rpc.Heartbeat)
            GOOGLE_DCHECK_NE(&from, this);
            const Heartbeat *source =
                ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Heartbeat>(&from);
            if (source == nullptr) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:cluster.rpc.Heartbeat)
                ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:cluster.rpc.Heartbeat)
                MergeFrom(*source);
            }
        }

        void Heartbeat::MergeFrom(const Heartbeat &from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:cluster.rpc.Heartbeat)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            (void)cached_has_bits;

            if (from.has_term()) {
                mutable_term()->::cluster::rpc::Term::MergeFrom(from.term());
            }
            if (from.has_from()) {
                mutable_from()->::cluster::rpc::ClusterId::MergeFrom(from.from());
            }
        }

        void Heartbeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
            // @@protoc_insertion_point(generalized_copy_from_start:cluster.rpc.Heartbeat)
            if (&from == this)
                return;
            Clear();
            MergeFrom(from);
        }

        void Heartbeat::CopyFrom(const Heartbeat &from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:cluster.rpc.Heartbeat)
            if (&from == this)
                return;
            Clear();
            MergeFrom(from);
        }

        bool Heartbeat::IsInitialized() const { return true; }

        void Heartbeat::Swap(Heartbeat *other) {
            if (other == this)
                return;
            InternalSwap(other);
        }
        void Heartbeat::InternalSwap(Heartbeat *other) {
            using std::swap;
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(term_, other->term_);
            swap(from_, other->from_);
        }

        ::PROTOBUF_NAMESPACE_ID::Metadata Heartbeat::GetMetadata() const {
            return GetMetadataStatic();
        }

        // ===================================================================

        void NetworkStateRequest::InitAsDefaultInstance() {
            ::cluster::rpc::_NetworkStateRequest_default_instance_._instance.get_mutable()->from_ =
                const_cast<::cluster::rpc::ClusterId *>(
                    ::cluster::rpc::ClusterId::internal_default_instance());
        }
        class NetworkStateRequest::HasBitSetters {
        public:
            static const ::cluster::rpc::ClusterId &from(const NetworkStateRequest *msg);
        };

        const ::cluster::rpc::ClusterId &
        NetworkStateRequest::HasBitSetters::from(const NetworkStateRequest *msg) {
            return *msg->from_;
        }
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int NetworkStateRequest::kFromFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

        NetworkStateRequest::NetworkStateRequest()
            : ::PROTOBUF_NAMESPACE_ID::Message()
            , _internal_metadata_(nullptr) {
            SharedCtor();
            // @@protoc_insertion_point(constructor:cluster.rpc.NetworkStateRequest)
        }
        NetworkStateRequest::NetworkStateRequest(const NetworkStateRequest &from)
            : ::PROTOBUF_NAMESPACE_ID::Message()
            , _internal_metadata_(nullptr) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            if (from.has_from()) {
                from_ = new ::cluster::rpc::ClusterId(*from.from_);
            } else {
                from_ = nullptr;
            }
            // @@protoc_insertion_point(copy_constructor:cluster.rpc.NetworkStateRequest)
        }

        void NetworkStateRequest::SharedCtor() {
            ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
                &scc_info_NetworkStateRequest_rpc_2fleader_2eproto.base);
            from_ = nullptr;
        }

        NetworkStateRequest::~NetworkStateRequest() {
            // @@protoc_insertion_point(destructor:cluster.rpc.NetworkStateRequest)
            SharedDtor();
        }

        void NetworkStateRequest::SharedDtor() {
            if (this != internal_default_instance())
                delete from_;
        }

        void NetworkStateRequest::SetCachedSize(int size) const { _cached_size_.Set(size); }
        const NetworkStateRequest &NetworkStateRequest::default_instance() {
            ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
                &::scc_info_NetworkStateRequest_rpc_2fleader_2eproto.base);
            return *internal_default_instance();
        }

        void NetworkStateRequest::Clear() {
            // @@protoc_insertion_point(message_clear_start:cluster.rpc.NetworkStateRequest)
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void)cached_has_bits;

            if (GetArenaNoVirtual() == nullptr && from_ != nullptr) {
                delete from_;
            }
            from_ = nullptr;
            _internal_metadata_.Clear();
        }

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        const char *
        NetworkStateRequest::_InternalParse(const char *ptr,
                                            ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                                                                                    \
    if (PROTOBUF_PREDICT_FALSE(!(x)))                                                              \
    goto failure
            while (!ctx->Done(&ptr)) {
                ::PROTOBUF_NAMESPACE_ID::uint32 tag;
                ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
                CHK_(ptr);
                switch (tag >> 3) {
                // .cluster.rpc.ClusterId from = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) ==
                                              10)) {
                        ptr = ctx->ParseMessage(mutable_from(), ptr);
                        CHK_(ptr);
                    } else
                        goto handle_unusual;
                    continue;
                default: {
                handle_unusual:
                    if ((tag & 7) == 4 || tag == 0) {
                        ctx->SetLastTag(tag);
                        goto success;
                    }
                    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
                    CHK_(ptr != nullptr);
                    continue;
                }
                } // switch
            }     // while
        success:
            return ptr;
        failure:
            ptr = nullptr;
            goto success;
#undef CHK_
        }
#else // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        bool NetworkStateRequest::MergePartialFromCodedStream(
            ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream *input) {
#define DO_(EXPRESSION)                                                                            \
    if (!PROTOBUF_PREDICT_TRUE(EXPRESSION))                                                        \
    goto failure
            ::PROTOBUF_NAMESPACE_ID::uint32 tag;
            // @@protoc_insertion_point(parse_start:cluster.rpc.NetworkStateRequest)
            for (;;) {
                ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p =
                    input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second)
                    goto handle_unusual;
                switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // .cluster.rpc.ClusterId from = 1;
                case 1: {
                    if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
                        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                            input, mutable_from()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                default: {
                handle_unusual:
                    if (tag == 0) {
                        goto success;
                    }
                    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
                        input, tag, _internal_metadata_.mutable_unknown_fields()));
                    break;
                }
                }
            }
        success:
            // @@protoc_insertion_point(parse_success:cluster.rpc.NetworkStateRequest)
            return true;
        failure:
            // @@protoc_insertion_point(parse_failure:cluster.rpc.NetworkStateRequest)
            return false;
#undef DO_
        }
#endif // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

        void NetworkStateRequest::SerializeWithCachedSizes(
            ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream *output) const {
            // @@protoc_insertion_point(serialize_start:cluster.rpc.NetworkStateRequest)
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            (void)cached_has_bits;

            // .cluster.rpc.ClusterId from = 1;
            if (this->has_from()) {
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
                    1, HasBitSetters::from(this), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:cluster.rpc.NetworkStateRequest)
        }

        ::PROTOBUF_NAMESPACE_ID::uint8 *
        NetworkStateRequest::InternalSerializeWithCachedSizesToArray(
            ::PROTOBUF_NAMESPACE_ID::uint8 *target) const {
            // @@protoc_insertion_point(serialize_to_array_start:cluster.rpc.NetworkStateRequest)
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            (void)cached_has_bits;

            // .cluster.rpc.ClusterId from = 1;
            if (this->has_from()) {
                target =
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageToArray(
                        1, HasBitSetters::from(this), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target =
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
                        _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:cluster.rpc.NetworkStateRequest)
            return target;
        }

        size_t NetworkStateRequest::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:cluster.rpc.NetworkStateRequest)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
                        _internal_metadata_.unknown_fields());
            }
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void)cached_has_bits;

            // .cluster.rpc.ClusterId from = 1;
            if (this->has_from()) {
                total_size +=
                    1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*from_);
            }

            int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
            SetCachedSize(cached_size);
            return total_size;
        }

        void NetworkStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
            // @@protoc_insertion_point(generalized_merge_from_start:cluster.rpc.NetworkStateRequest)
            GOOGLE_DCHECK_NE(&from, this);
            const NetworkStateRequest *source =
                ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkStateRequest>(&from);
            if (source == nullptr) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:cluster.rpc.NetworkStateRequest)
                ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:cluster.rpc.NetworkStateRequest)
                MergeFrom(*source);
            }
        }

        void NetworkStateRequest::MergeFrom(const NetworkStateRequest &from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:cluster.rpc.NetworkStateRequest)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            (void)cached_has_bits;

            if (from.has_from()) {
                mutable_from()->::cluster::rpc::ClusterId::MergeFrom(from.from());
            }
        }

        void NetworkStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
            // @@protoc_insertion_point(generalized_copy_from_start:cluster.rpc.NetworkStateRequest)
            if (&from == this)
                return;
            Clear();
            MergeFrom(from);
        }

        void NetworkStateRequest::CopyFrom(const NetworkStateRequest &from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:cluster.rpc.NetworkStateRequest)
            if (&from == this)
                return;
            Clear();
            MergeFrom(from);
        }

        bool NetworkStateRequest::IsInitialized() const { return true; }

        void NetworkStateRequest::Swap(NetworkStateRequest *other) {
            if (other == this)
                return;
            InternalSwap(other);
        }
        void NetworkStateRequest::InternalSwap(NetworkStateRequest *other) {
            using std::swap;
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(from_, other->from_);
        }

        ::PROTOBUF_NAMESPACE_ID::Metadata NetworkStateRequest::GetMetadata() const {
            return GetMetadataStatic();
        }

        // ===================================================================

        void NetworkStateResponse::InitAsDefaultInstance() {
            ::cluster::rpc::_NetworkStateResponse_default_instance_._instance.get_mutable()->term_ =
                const_cast<::cluster::rpc::Term *>(
                    ::cluster::rpc::Term::internal_default_instance());
            ::cluster::rpc::_NetworkStateResponse_default_instance_._instance.get_mutable()->from_ =
                const_cast<::cluster::rpc::ClusterId *>(
                    ::cluster::rpc::ClusterId::internal_default_instance());
            ::cluster::rpc::_NetworkStateResponse_default_instance_._instance.get_mutable()
                ->leader_ = const_cast<::cluster::rpc::ClusterId *>(
                ::cluster::rpc::ClusterId::internal_default_instance());
        }
        class NetworkStateResponse::HasBitSetters {
        public:
            static const ::cluster::rpc::Term &term(const NetworkStateResponse *msg);
            static const ::cluster::rpc::ClusterId &from(const NetworkStateResponse *msg);
            static const ::cluster::rpc::ClusterId &leader(const NetworkStateResponse *msg);
        };

        const ::cluster::rpc::Term &
        NetworkStateResponse::HasBitSetters::term(const NetworkStateResponse *msg) {
            return *msg->term_;
        }
        const ::cluster::rpc::ClusterId &
        NetworkStateResponse::HasBitSetters::from(const NetworkStateResponse *msg) {
            return *msg->from_;
        }
        const ::cluster::rpc::ClusterId &
        NetworkStateResponse::HasBitSetters::leader(const NetworkStateResponse *msg) {
            return *msg->leader_;
        }
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int NetworkStateResponse::kTermFieldNumber;
        const int NetworkStateResponse::kFromFieldNumber;
        const int NetworkStateResponse::kClustersFieldNumber;
        const int NetworkStateResponse::kLeaderFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

        NetworkStateResponse::NetworkStateResponse()
            : ::PROTOBUF_NAMESPACE_ID::Message()
            , _internal_metadata_(nullptr) {
            SharedCtor();
            // @@protoc_insertion_point(constructor:cluster.rpc.NetworkStateResponse)
        }
        NetworkStateResponse::NetworkStateResponse(const NetworkStateResponse &from)
            : ::PROTOBUF_NAMESPACE_ID::Message()
            , _internal_metadata_(nullptr)
            , clusters_(from.clusters_) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            if (from.has_term()) {
                term_ = new ::cluster::rpc::Term(*from.term_);
            } else {
                term_ = nullptr;
            }
            if (from.has_from()) {
                from_ = new ::cluster::rpc::ClusterId(*from.from_);
            } else {
                from_ = nullptr;
            }
            if (from.has_leader()) {
                leader_ = new ::cluster::rpc::ClusterId(*from.leader_);
            } else {
                leader_ = nullptr;
            }
            // @@protoc_insertion_point(copy_constructor:cluster.rpc.NetworkStateResponse)
        }

        void NetworkStateResponse::SharedCtor() {
            ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
                &scc_info_NetworkStateResponse_rpc_2fleader_2eproto.base);
            ::memset(&term_, 0,
                     static_cast<size_t>(reinterpret_cast<char *>(&leader_) -
                                         reinterpret_cast<char *>(&term_)) +
                         sizeof(leader_));
        }

        NetworkStateResponse::~NetworkStateResponse() {
            // @@protoc_insertion_point(destructor:cluster.rpc.NetworkStateResponse)
            SharedDtor();
        }

        void NetworkStateResponse::SharedDtor() {
            if (this != internal_default_instance())
                delete term_;
            if (this != internal_default_instance())
                delete from_;
            if (this != internal_default_instance())
                delete leader_;
        }

        void NetworkStateResponse::SetCachedSize(int size) const { _cached_size_.Set(size); }
        const NetworkStateResponse &NetworkStateResponse::default_instance() {
            ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
                &::scc_info_NetworkStateResponse_rpc_2fleader_2eproto.base);
            return *internal_default_instance();
        }

        void NetworkStateResponse::Clear() {
            // @@protoc_insertion_point(message_clear_start:cluster.rpc.NetworkStateResponse)
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void)cached_has_bits;

            clusters_.Clear();
            if (GetArenaNoVirtual() == nullptr && term_ != nullptr) {
                delete term_;
            }
            term_ = nullptr;
            if (GetArenaNoVirtual() == nullptr && from_ != nullptr) {
                delete from_;
            }
            from_ = nullptr;
            if (GetArenaNoVirtual() == nullptr && leader_ != nullptr) {
                delete leader_;
            }
            leader_ = nullptr;
            _internal_metadata_.Clear();
        }

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        const char *
        NetworkStateResponse::_InternalParse(const char *ptr,
                                             ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                                                                                    \
    if (PROTOBUF_PREDICT_FALSE(!(x)))                                                              \
    goto failure
            while (!ctx->Done(&ptr)) {
                ::PROTOBUF_NAMESPACE_ID::uint32 tag;
                ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
                CHK_(ptr);
                switch (tag >> 3) {
                // .cluster.rpc.Term term = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) ==
                                              10)) {
                        ptr = ctx->ParseMessage(mutable_term(), ptr);
                        CHK_(ptr);
                    } else
                        goto handle_unusual;
                    continue;
                // .cluster.rpc.ClusterId from = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) ==
                                              18)) {
                        ptr = ctx->ParseMessage(mutable_from(), ptr);
                        CHK_(ptr);
                    } else
                        goto handle_unusual;
                    continue;
                // repeated .cluster.rpc.ClusterId clusters = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) ==
                                              26)) {
                        ptr -= 1;
                        do {
                            ptr += 1;
                            ptr = ctx->ParseMessage(add_clusters(), ptr);
                            CHK_(ptr);
                            if (!ctx->DataAvailable(ptr))
                                break;
                        } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<
                                     ::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
                    } else
                        goto handle_unusual;
                    continue;
                // .cluster.rpc.ClusterId leader = 4;
                case 4:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) ==
                                              34)) {
                        ptr = ctx->ParseMessage(mutable_leader(), ptr);
                        CHK_(ptr);
                    } else
                        goto handle_unusual;
                    continue;
                default: {
                handle_unusual:
                    if ((tag & 7) == 4 || tag == 0) {
                        ctx->SetLastTag(tag);
                        goto success;
                    }
                    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
                    CHK_(ptr != nullptr);
                    continue;
                }
                } // switch
            }     // while
        success:
            return ptr;
        failure:
            ptr = nullptr;
            goto success;
#undef CHK_
        }
#else // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        bool NetworkStateResponse::MergePartialFromCodedStream(
            ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream *input) {
#define DO_(EXPRESSION)                                                                            \
    if (!PROTOBUF_PREDICT_TRUE(EXPRESSION))                                                        \
    goto failure
            ::PROTOBUF_NAMESPACE_ID::uint32 tag;
            // @@protoc_insertion_point(parse_start:cluster.rpc.NetworkStateResponse)
            for (;;) {
                ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p =
                    input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second)
                    goto handle_unusual;
                switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // .cluster.rpc.Term term = 1;
                case 1: {
                    if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
                        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                            input, mutable_term()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                // .cluster.rpc.ClusterId from = 2;
                case 2: {
                    if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
                        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                            input, mutable_from()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                // repeated .cluster.rpc.ClusterId clusters = 3;
                case 3: {
                    if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
                        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                            input, add_clusters()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                // .cluster.rpc.ClusterId leader = 4;
                case 4: {
                    if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
                        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                            input, mutable_leader()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                default: {
                handle_unusual:
                    if (tag == 0) {
                        goto success;
                    }
                    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
                        input, tag, _internal_metadata_.mutable_unknown_fields()));
                    break;
                }
                }
            }
        success:
            // @@protoc_insertion_point(parse_success:cluster.rpc.NetworkStateResponse)
            return true;
        failure:
            // @@protoc_insertion_point(parse_failure:cluster.rpc.NetworkStateResponse)
            return false;
#undef DO_
        }
#endif // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

        void NetworkStateResponse::SerializeWithCachedSizes(
            ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream *output) const {
            // @@protoc_insertion_point(serialize_start:cluster.rpc.NetworkStateResponse)
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            (void)cached_has_bits;

            // .cluster.rpc.Term term = 1;
            if (this->has_term()) {
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
                    1, HasBitSetters::term(this), output);
            }

            // .cluster.rpc.ClusterId from = 2;
            if (this->has_from()) {
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
                    2, HasBitSetters::from(this), output);
            }

            // repeated .cluster.rpc.ClusterId clusters = 3;
            for (unsigned int i = 0, n = static_cast<unsigned int>(this->clusters_size()); i < n;
                 i++) {
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
                    3, this->clusters(static_cast<int>(i)), output);
            }

            // .cluster.rpc.ClusterId leader = 4;
            if (this->has_leader()) {
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
                    4, HasBitSetters::leader(this), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:cluster.rpc.NetworkStateResponse)
        }

        ::PROTOBUF_NAMESPACE_ID::uint8 *
        NetworkStateResponse::InternalSerializeWithCachedSizesToArray(
            ::PROTOBUF_NAMESPACE_ID::uint8 *target) const {
            // @@protoc_insertion_point(serialize_to_array_start:cluster.rpc.NetworkStateResponse)
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            (void)cached_has_bits;

            // .cluster.rpc.Term term = 1;
            if (this->has_term()) {
                target =
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageToArray(
                        1, HasBitSetters::term(this), target);
            }

            // .cluster.rpc.ClusterId from = 2;
            if (this->has_from()) {
                target =
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageToArray(
                        2, HasBitSetters::from(this), target);
            }

            // repeated .cluster.rpc.ClusterId clusters = 3;
            for (unsigned int i = 0, n = static_cast<unsigned int>(this->clusters_size()); i < n;
                 i++) {
                target =
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageToArray(
                        3, this->clusters(static_cast<int>(i)), target);
            }

            // .cluster.rpc.ClusterId leader = 4;
            if (this->has_leader()) {
                target =
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageToArray(
                        4, HasBitSetters::leader(this), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target =
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
                        _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:cluster.rpc.NetworkStateResponse)
            return target;
        }

        size_t NetworkStateResponse::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:cluster.rpc.NetworkStateResponse)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
                        _internal_metadata_.unknown_fields());
            }
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void)cached_has_bits;

            // repeated .cluster.rpc.ClusterId clusters = 3;
            {
                unsigned int count = static_cast<unsigned int>(this->clusters_size());
                total_size += 1UL * count;
                for (unsigned int i = 0; i < count; i++) {
                    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                        this->clusters(static_cast<int>(i)));
                }
            }

            // .cluster.rpc.Term term = 1;
            if (this->has_term()) {
                total_size +=
                    1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*term_);
            }

            // .cluster.rpc.ClusterId from = 2;
            if (this->has_from()) {
                total_size +=
                    1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*from_);
            }

            // .cluster.rpc.ClusterId leader = 4;
            if (this->has_leader()) {
                total_size +=
                    1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*leader_);
            }

            int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
            SetCachedSize(cached_size);
            return total_size;
        }

        void NetworkStateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
            // @@protoc_insertion_point(generalized_merge_from_start:cluster.rpc.NetworkStateResponse)
            GOOGLE_DCHECK_NE(&from, this);
            const NetworkStateResponse *source =
                ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkStateResponse>(&from);
            if (source == nullptr) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:cluster.rpc.NetworkStateResponse)
                ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:cluster.rpc.NetworkStateResponse)
                MergeFrom(*source);
            }
        }

        void NetworkStateResponse::MergeFrom(const NetworkStateResponse &from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:cluster.rpc.NetworkStateResponse)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            (void)cached_has_bits;

            clusters_.MergeFrom(from.clusters_);
            if (from.has_term()) {
                mutable_term()->::cluster::rpc::Term::MergeFrom(from.term());
            }
            if (from.has_from()) {
                mutable_from()->::cluster::rpc::ClusterId::MergeFrom(from.from());
            }
            if (from.has_leader()) {
                mutable_leader()->::cluster::rpc::ClusterId::MergeFrom(from.leader());
            }
        }

        void NetworkStateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
            // @@protoc_insertion_point(generalized_copy_from_start:cluster.rpc.NetworkStateResponse)
            if (&from == this)
                return;
            Clear();
            MergeFrom(from);
        }

        void NetworkStateResponse::CopyFrom(const NetworkStateResponse &from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:cluster.rpc.NetworkStateResponse)
            if (&from == this)
                return;
            Clear();
            MergeFrom(from);
        }

        bool NetworkStateResponse::IsInitialized() const { return true; }

        void NetworkStateResponse::Swap(NetworkStateResponse *other) {
            if (other == this)
                return;
            InternalSwap(other);
        }
        void NetworkStateResponse::InternalSwap(NetworkStateResponse *other) {
            using std::swap;
            _internal_metadata_.Swap(&other->_internal_metadata_);
            CastToBase(&clusters_)->InternalSwap(CastToBase(&other->clusters_));
            swap(term_, other->term_);
            swap(from_, other->from_);
            swap(leader_, other->leader_);
        }

        ::PROTOBUF_NAMESPACE_ID::Metadata NetworkStateResponse::GetMetadata() const {
            return GetMetadataStatic();
        }

        // @@protoc_insertion_point(namespace_scope)
    } // namespace rpc
} // namespace cluster
PROTOBUF_NAMESPACE_OPEN
template <>
PROTOBUF_NOINLINE ::cluster::rpc::Term *
Arena::CreateMaybeMessage<::cluster::rpc::Term>(Arena *arena) {
    return Arena::CreateInternal<::cluster::rpc::Term>(arena);
}
template <>
PROTOBUF_NOINLINE ::cluster::rpc::ClusterId *
Arena::CreateMaybeMessage<::cluster::rpc::ClusterId>(Arena *arena) {
    return Arena::CreateInternal<::cluster::rpc::ClusterId>(arena);
}
template <>
PROTOBUF_NOINLINE ::cluster::rpc::Request *
Arena::CreateMaybeMessage<::cluster::rpc::Request>(Arena *arena) {
    return Arena::CreateInternal<::cluster::rpc::Request>(arena);
}
template <>
PROTOBUF_NOINLINE ::cluster::rpc::Response *
Arena::CreateMaybeMessage<::cluster::rpc::Response>(Arena *arena) {
    return Arena::CreateInternal<::cluster::rpc::Response>(arena);
}
template <>
PROTOBUF_NOINLINE ::cluster::rpc::Heartbeat *
Arena::CreateMaybeMessage<::cluster::rpc::Heartbeat>(Arena *arena) {
    return Arena::CreateInternal<::cluster::rpc::Heartbeat>(arena);
}
template <>
PROTOBUF_NOINLINE ::cluster::rpc::NetworkStateRequest *
Arena::CreateMaybeMessage<::cluster::rpc::NetworkStateRequest>(Arena *arena) {
    return Arena::CreateInternal<::cluster::rpc::NetworkStateRequest>(arena);
}
template <>
PROTOBUF_NOINLINE ::cluster::rpc::NetworkStateResponse *
Arena::CreateMaybeMessage<::cluster::rpc::NetworkStateResponse>(Arena *arena) {
    return Arena::CreateInternal<::cluster::rpc::NetworkStateResponse>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
